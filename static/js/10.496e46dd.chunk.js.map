{"version":3,"sources":["pages/AdminView.js","components/CryptoComponents/client.js","utils/demo/notifications.js"],"names":["AdminView","wallet","setWallet","useState","secretjs","address","sponsorRequest","setSponsorRequest","async","sponsorRequestDecider","sponsor","i","type","newArray","status","fetchSponsorMessageRequests","sponsor_message_request_check","query","compute","queryContract","contractAddress","process","codeHash","vec","sponsors","console","log","useEffect","setupKeplr","setupKeplrfun","pageTable2","setPageTable2","dataTable2","setDataTable2","slice","className","map","key","addr","index","title","message","layout","size","aria-label","onClick","aria-hidden","totalResults","length","resultsPerPage","onChange","p","label","review","r","push","is_accepted","tx","executeContract","sender","msg","review_sponsors","decisions","sentFunds","gasLimit","jsonLog","Notifications","transactionHash","rawLog","err","SendTxn","sleep","number","Promise","resolve","setTimeout","window","keplr","getEnigmaUtils","getOfflineSignerOnlyAmino","enable","keplrOfflineSigner","myAddress","getAccounts","SecretNetworkClient","create","grpcWebUrl","chainId","walletAddress","encryptionUtils","dotenv","path","toastMixin","Swal","mixin","toast","icon","position","showConfirmButton","timer","timerProgressBar","showCloseButton","didOpen","addEventListener","stopTimer","resumeTimer","fire","text","color","background"],"mappings":"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","file":"static/js/10.496e46dd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { setupKeplr } from \"../components/CryptoComponents/client\";\nimport Notifications from \"../utils/demo/notifications.js\";\n\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Badge,\n  Avatar,\n  Button,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport { HeartIcon, TrashIcon } from \"../icons\";\nfunction AdminView() {\n  let [wallet, setWallet] = useState({ secretjs: null, address: null });\n  let [sponsorRequest, setSponsorRequest] = useState([]);\n\n  async function setupKeplrfun() {\n    const { secretjs, address } = await setupKeplr();\n    setWallet({ secretjs, address });\n  }\n  useEffect(() => {\n    if (wallet.secretjs == null || wallet.address == null) {\n      setupKeplrfun();\n    }\n\n    if (wallet.secretjs != null || wallet.address != null) {\n      fetchSponsorMessageRequests();\n    }\n  }, [wallet]);\n\n  async function sponsorRequestDecider(sponsor, i, type) {\n    let newArray = [...sponsorRequest];\n    sponsor.status = type;\n    newArray[i] = sponsor;\n    setSponsorRequest(newArray);\n  }\n\n  async function fetchSponsorMessageRequests() {\n    const { secretjs, address } = wallet;\n\n    let contract_address = process.env.REACT_APP_POOL_CONTRACT_ADDRESS;\n\n    let sponsor_message_request_check =\n      await secretjs.query.compute.queryContract({\n        contractAddress: contract_address,\n        codeHash: process.env.REACT_APP_POOL_CONTRACT_HASH, // optional but way faster\n        query: {\n          sponsor_message_request_check: {},\n        },\n      });\n    setSponsorRequest(sponsor_message_request_check.vec);\n\n    let sponsors = await secretjs.query.compute.queryContract({\n      contractAddress: contract_address,\n      codeHash: process.env.REACT_APP_POOL_CONTRACT_HASH, // optional but way faster\n      query: {\n        sponsors: {},\n      },\n    });\n    console.log(sponsors);\n  }\n\n  async function SendTxn() {\n    const { secretjs, address } = wallet;\n\n    let contract_address = process.env.REACT_APP_POOL_CONTRACT_ADDRESS;\n    let codeHash = process.env.REACT_APP_POOL_CONTRACT_HASH;\n\n    let review = [];\n\n    for (let i = 0; i < sponsorRequest.length; i++) {\n      let r = sponsorRequest[i];\n      if (r.status) {\n        if (r.status == \"accepted\") {\n          review.push({ index: r.index, is_accepted: true });\n        }\n        if (r.status == \"rejected\") {\n          review.push({ index: r.index, is_accepted: false });\n        }\n      }\n    }\n    try {\n      let tx = await secretjs.tx.compute.executeContract(\n        {\n          sender: address,\n          contractAddress: contract_address,\n          codeHash: codeHash, // optional but way faster\n          msg: {\n            review_sponsors: { decisions: review },\n          },\n          sentFunds: [], // optional{}\n        },\n        {\n          gasLimit: 240297,\n        }\n      );\n\n      if (tx.jsonLog) {\n        Notifications(\n          \"success\",\n          \"Review submitted successfully!\",\n          ` \\n \n        Txhash: ${tx.transactionHash}`\n        );\n      } else {\n        Notifications(\"error\", \"ERROR\", tx.rawLog);\n      }\n    } catch (err) {\n      Notifications(\"error\", \"ERROR\", err);\n    }\n    await fetchSponsorMessageRequests();\n  }\n\n  const [pageTable2, setPageTable2] = useState(1);\n  const [dataTable2, setDataTable2] = useState([]);\n  const resultsPerPage = 10;\n  useEffect(() => {\n    setDataTable2(\n      sponsorRequest.slice(\n        (pageTable2 - 1) * resultsPerPage,\n        pageTable2 * resultsPerPage\n      )\n    );\n  }, [pageTable2, sponsorRequest]);\n\n  function onPageChangeTable2(p) {\n    setPageTable2(p);\n  }\n\n  return (\n    <div>\n      <div>\n        <div className=\"Panel\">\n          <TableContainer className=\"mb-8\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Address</TableCell>\n                  <TableCell>Index</TableCell>\n\n                  <TableCell>Title</TableCell>\n                  <TableCell>Message</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {dataTable2.map((sponsor, i) => (\n                  <TableRow key={i}>\n                    <TableCell>\n                      <span className=\"text-sm\"> {sponsor.addr}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\"> {sponsor.index}</span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <div>\n                          <p className=\"font-semibold\">{sponsor.title}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\"> {sponsor.message}</span>\n                    </TableCell>\n                    <TableCell>\n                      {sponsor.status ? (\n                        sponsor.status == \"rejected\" ? (\n                          <Badge type=\"danger\">{sponsor.status}</Badge>\n                        ) : (\n                          <Badge type=\"success\">{sponsor.status}</Badge>\n                        )\n                      ) : (\n                        <Badge type=\"primary\">pending</Badge>\n                      )}\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"flex items-center space-x-4\">\n                        <Button\n                          layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"Edit\"\n                          onClick={() => {\n                            sponsorRequestDecider(sponsor, i, \"accepted\");\n                          }}\n                        >\n                          <HeartIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        </Button>\n                        <Button\n                          layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"Delete\"\n                          onClick={() => {\n                            sponsorRequestDecider(sponsor, i, \"rejected\");\n                          }}\n                        >\n                          <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            <TableFooter>\n              <Pagination\n                totalResults={sponsorRequest ? sponsorRequest.length : 0}\n                resultsPerPage={resultsPerPage}\n                onChange={onPageChangeTable2}\n                label=\"Table navigation\"\n              />\n            </TableFooter>\n          </TableContainer>\n          <button onClick={() => SendTxn()}>Send txn</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// const DataTable = ({ sponsorRequest }) => (\n//   <TableContainer className=\"mb-8\">\n//     <Table>\n//       <TableHeader>\n//         <tr>\n//           <TableCell>Title</TableCell>\n//           <TableCell>Message</TableCell>\n//           <TableCell>Status</TableCell>\n//           <TableCell>Actions</TableCell>\n//         </tr>\n//       </TableHeader>\n//       <TableBody>\n//         {dataTable2.map((sponsor, i) => (\n//           <TableRow key={i}>\n//             <TableCell>\n//               <div className=\"flex items-center text-sm\">\n//                 <div>\n//                   <p className=\"font-semibold\">{sponsor.title}</p>\n//                   <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n//                     {sponsor.job}\n//                   </p>\n//                 </div>\n//               </div>\n//             </TableCell>\n//             <TableCell>\n//               <span className=\"text-sm\">$ {sponsor.message}</span>\n//             </TableCell>\n//             <TableCell>\n//               <Badge type=\"primary\">LOL</Badge>\n//             </TableCell>\n\n//             <TableCell>\n//               <div className=\"flex items-center space-x-4\">\n//                 <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\">\n//                   <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n//                 </Button>\n//                 <Button layout=\"link\" size=\"icon\" aria-label=\"Delete\">\n//                   <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n//                 </Button>\n//               </div>\n//             </TableCell>\n//           </TableRow>\n//         ))}\n//       </TableBody>\n//     </Table>\n//     <TableFooter>\n//       <Pagination\n//         totalResults={sponsorRequest.len}\n//         resultsPerPage={resultsPerPage}\n//         onChange={onPageChangeTable2}\n//         label=\"Table navigation\"\n//       />\n//     </TableFooter>\n//   </TableContainer>\n// );\nexport default AdminView;\n","import { SecretNetworkClient } from \"secretjs\";\nimport * as dotenv from \"dotenv\"; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\ndotenv.config({ path: \"../../../.env\" });\n\nexport async function setupKeplr() {\n  const sleep = (number) =>\n    new Promise((resolve) => setTimeout(resolve, number));\n  const SECRET_REST_API = process.env.REACT_APP_SECRET_REST_URL;\n\n  const SECRET_CHAIN_ID = process.env.REACT_APP_SECRET_CHAIN_ID;\n\n  while (\n    !window.keplr ||\n    !window.getEnigmaUtils ||\n    !window.getOfflineSignerOnlyAmino\n  ) {\n    await sleep(50);\n  }\n\n  await window.keplr.enable(SECRET_CHAIN_ID);\n  const keplrOfflineSigner =\n    window.keplr.getOfflineSignerOnlyAmino(SECRET_CHAIN_ID);\n\n  const [{ address: myAddress }] = await keplrOfflineSigner.getAccounts();\n\n  const grpcWebUrl = SECRET_REST_API;\n\n  const secretjs = await SecretNetworkClient.create({\n    grpcWebUrl,\n    chainId: SECRET_CHAIN_ID,\n    wallet: keplrOfflineSigner,\n    walletAddress: myAddress,\n    encryptionUtils: window.keplr.getEnigmaUtils(SECRET_CHAIN_ID),\n  });\n\n  let obj = {\n    address: myAddress,\n    secretjs,\n  };\n\n  return obj;\n}\n","import Swal from \"sweetalert2\";\n\nvar toastMixin = Swal.mixin({\n  toast: true,\n  icon: \"success\",\n  title: \"General Title\",\n  position: \"top-right\",\n  showConfirmButton: false,\n  timer: 15000,\n  timerProgressBar: true,\n  showCloseButton: true,\n  didOpen: (toast) => {\n    toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n    toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n  },\n});\n\nexport default async function Notifications(type, title, message) {\n  let themeColor = \"#136762\";\n  let fontColor = \"#ffffff\";\n\n  toastMixin.fire({\n    title: title,\n    text: message,\n    icon: type,\n    color: fontColor,\n    background: themeColor,\n  });\n}\n"],"sourceRoot":""}