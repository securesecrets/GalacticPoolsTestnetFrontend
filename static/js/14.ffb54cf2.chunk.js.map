{"version":3,"sources":["modals/DepositModal.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","width","height","transform","backgroundColor","borderRadius","DepositModal","isShowing","hide","clearfields","balance","onInputchange","setinputBalance","inputBalance","deposit","isDepositButtonEnabled","isDepositing","ReactDOM","createPortal","Fragment","isOpen","onRequestClose","contentLabel","style","ariaHideApp","className","type","aria-label","onClick","src","logo","alt","min","placeholder","placeholder-default","name","value","onChange","toFixed","disabled","document","body","DepositModall","props","setBalance","useState","SetIsDepositButtonEnabled","setIsDepositing","wallet","setWallet","secretjs","address","async","fetchBalance","amount","query","bank","denom","callback","useEffect","setupKeplr","setupKeplrfun","e","target","String","tx","compute","executeContract","sender","contractAddress","process","codeHash","msg","sentFunds","gasLimit","console","log","jsonLog","Notifications","transactionHash","rawLog","err","am"],"mappings":"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","file":"static/js/14.ffb54cf2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"@windmill/react-ui\";\nimport logo from \"../assets/img/scrt_logo.png\"; // with import\nimport { setupKeplr } from \"../components/CryptoComponents/client\";\nimport ReactDOM from \"react-dom\";\nimport Notifications from \"../utils/demo/notifications.js\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    width: \"35%\",\n    height: \"35%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0f4d4a\",\n    borderRadius: \"1%\",\n    // padding: \"2%\",\n  },\n};\n\nconst DepositModal = ({\n  isShowing,\n  hide,\n  clearfields,\n  balance,\n  onInputchange,\n  setinputBalance,\n  inputBalance,\n  deposit,\n  isDepositButtonEnabled,\n  isDepositing,\n}) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <Modal\n            isOpen={isShowing}\n            onRequestClose={clearfields}\n            contentLabel=\"Example Modal\"\n            style={customStyles}\n            ariaHideApp={false}\n          >\n            <div className=\"flex flex-col h-full justify-between\">\n              <div className=\"flex flex-row justify-between items-center\">\n                <div className=\"\">\n                  <span className=\"deposit-modal-heading\">Deposit</span>\n                </div>\n                <div className=\"btn-close white\">\n                  <button\n                    type=\"Button\"\n                    className=\"btn-close white\"\n                    aria-label=\"Close\"\n                    onClick={clearfields}\n                  ></button>\n                </div>\n              </div>\n\n              <div className=\"flex flex-row  justify-between items-center mt-4\">\n                <div className=\"\">\n                  <span className=\"deposit-modal-available text-m\">\n                    Available\n                  </span>\n                </div>\n                <div className=\"flex flex-row \">\n                  <div className=\"d-flex align-items-center m-1\">\n                    <img\n                      src={logo}\n                      alt=\"LOGO \"\n                      className=\"img-fluid mini-logo-size\"\n                    />\n                  </div>\n                  <div className=\"ps-1 pool_past_prizes m-1\">\n                    {balance / 1e6} SCRT\n                  </div>\n                </div>\n              </div>\n\n              <div\n                className=\"flex flex-row  justify-between items-center  p-2\n              mt-2 deposit-modal-deposit-field deposit-modal-deposit-field-shape \"\n              >\n                <div>\n                  <input\n                    className=\"deposit-modal-deposit-field text-white w-full\"\n                    type=\"number\"\n                    min=\"0\"\n                    placeholder=\"0.00\"\n                    placeholder-default=\"white\"\n                    name=\"inputBalance\"\n                    value={inputBalance}\n                    onChange={onInputchange}\n                  />\n                </div>\n                <div className=\"deposit-modal-deposit-field-tokens\">SCRT</div>\n              </div>\n              <div className=\"flex flex-row mt-4 items-center justify-between text-white \">\n                <div\n                  className=\"deposit-modal-amount-percentage px-5 \"\n                  onClick={() => {\n                    setinputBalance(((balance / 1e6) * 0.25).toFixed(2));\n                  }}\n                >\n                  <button>25%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage  px-5\"\n                  onClick={() => {\n                    setinputBalance(((balance / 1e6) * 0.5).toFixed(2));\n                  }}\n                >\n                  <button>50%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage px-5 \"\n                  onClick={() => {\n                    setinputBalance(((balance / 1e6) * 0.75).toFixed(2));\n                  }}\n                >\n                  <button>75%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage  px-5\"\n                  onClick={() => {\n                    setinputBalance(balance / 1e6);\n                  }}\n                >\n                  <button>100%</button>\n                </div>\n              </div>\n              <div className=\"flex flex-row mt-4 items-center justify-between \">\n                <Button\n                  className=\"btn account_deposit_button text-white self-center\"\n                  onClick={() => deposit()}\n                  disabled={!isDepositButtonEnabled}\n                >\n                  {isDepositing ? (\n                    <div className=\"loader-1 center\">\n                      <span></span>\n                    </div>\n                  ) : (\n                    <div>Deposit</div>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </Modal>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nfunction DepositModall(props) {\n  //fetch the balance\n  //create a state where you fetch secretjs once + the address\n  //\n\n  let [balance, setBalance] = useState(null);\n  let [inputBalance, setinputBalance] = useState(0);\n  let [isDepositButtonEnabled, SetIsDepositButtonEnabled] = useState(false);\n  let [isDepositing, setIsDepositing] = useState(false);\n\n  let [wallet, setWallet] = useState({ secretjs: null, address: null });\n\n  async function setupKeplrfun() {\n    const { secretjs, address } = await setupKeplr();\n    setWallet({ secretjs, address });\n  }\n\n  async function fetchBalance() {\n    // To create a readonly secret.js client, just pass in a gRPC-web endpoint\n    const { secretjs, address } = wallet;\n\n    const {\n      balance: { amount },\n    } = await secretjs.query.bank.balance({\n      address: address,\n      denom: \"uscrt\",\n    });\n    setBalance(amount);\n  }\n\n  async function deposit() {\n    setIsDepositing(true);\n    // To create a readonly secret.js client, just pass in a gRPC-web endpoint\n    const { secretjs, address } = wallet;\n\n    let amount = String(inputBalance * 1e6);\n    let contractAddress = process.env.REACT_APP_POOL_CONTRACT_ADDRESS;\n    let codeHash = process.env.REACT_APP_POOL_CONTRACT_HASH;\n    try {\n      let tx = await secretjs.tx.compute.executeContract(\n        {\n          sender: address,\n          contractAddress: contractAddress,\n          codeHash: codeHash, // optional but way faster\n          msg: {\n            deposit: {},\n          },\n          sentFunds: [{ amount: amount, denom: \"uscrt\" }], // optional{}\n        },\n        {\n          gasLimit: 240297,\n        }\n      );\n      console.log(tx);\n\n      if (tx.jsonLog) {\n        Notifications(\n          \"success\",\n          \"Transaction sent!\",\n          `Successfully deposited: ${inputBalance} SCRT \\n \n        Txhash: ${tx.transactionHash}`\n        );\n      } else {\n        Notifications(\"error\", \"ERROR\", tx.rawLog);\n      }\n    } catch (err) {\n      Notifications(\"error\", \"ERROR\", err);\n    }\n\n    const {\n      balance: { amount: am },\n    } = await secretjs.query.bank.balance({\n      address: address,\n      denom: \"uscrt\",\n    });\n    setBalance(am);\n\n    // } catch (e) {\n    //   Notifications(\"error\", \"ERROR\", e);\n    // }\n\n    await clearfields();\n  }\n\n  useEffect(() => {\n    if (wallet.secretjs == null || wallet.address == null) {\n      setupKeplrfun();\n    }\n\n    if (wallet.secretjs != null || wallet.address != null) {\n      fetchBalance();\n    }\n\n    if (inputBalance !== 0) {\n      SetIsDepositButtonEnabled(true);\n    } else {\n      SetIsDepositButtonEnabled(false);\n    }\n\n    if (inputBalance * 1e6 > balance) {\n      SetIsDepositButtonEnabled(false);\n    }\n  }, [wallet, inputBalance, balance, fetchBalance]);\n\n  async function onInputchange(e) {\n    setinputBalance(e.target.value);\n  }\n\n  async function clearfields() {\n    props.hide();\n    await props.callback();\n    setinputBalance(0);\n    setIsDepositing(false);\n  }\n\n  return (\n    <DepositModal\n      isShowing={props.isShowing}\n      hide={props.hide}\n      clearfields={clearfields}\n      balance={balance}\n      onInputchange={onInputchange}\n      setinputBalance={setinputBalance}\n      inputBalance={inputBalance}\n      deposit={deposit}\n      isDepositButtonEnabled={isDepositButtonEnabled}\n      isDepositing={isDepositing}\n    />\n  );\n}\n\nexport default DepositModall;\n"],"sourceRoot":""}