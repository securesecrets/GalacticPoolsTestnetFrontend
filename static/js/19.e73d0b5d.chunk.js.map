{"version":3,"sources":["modals/WithdrawableModal.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","width","height","transform","backgroundColor","borderRadius","padding","WM","isShowing","hide","type","clearfields","props","inputBalance","onInputchange","setinputBalance","withdraw","isWithdrawButtonEnabled","isWithdrawing","ReactDOM","createPortal","Fragment","isOpen","onRequestClose","contentLabel","style","ariaHideApp","className","aria-label","onClick","src","logo","alt","withdrawable","min","placeholder","placeholder-default","name","value","onChange","toFixed","disabled","document","body","WithdrawModal","useState","SetIsButtonEnabled","setIsWithdrawing","wallet","setWallet","secretjs","address","async","callback","useEffect","setupKeplr","setupKeplrfun","e","target","message_type","amount","String","parseInt","wrapping_enabled","sponsor_withdraw","tx","compute","executeContract","sender","contractAddress","process","codeHash","msg","gasLimit","console","log","Notifications","transactionHash"],"mappings":"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","file":"static/js/19.e73d0b5d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"@windmill/react-ui\";\nimport logo from \"../assets/img/scrt_logo.png\"; // with import\nimport { setupKeplr } from \"../components/CryptoComponents/client\";\nimport ReactDOM from \"react-dom\";\nimport Notifications from \"../utils/demo/notifications.js\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    width: \"35%\",\n    height: \"35%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0f4d4a\",\n    borderRadius: \"1%\",\n    padding: \"2%\",\n  },\n};\n\nconst WM = ({\n  isShowing,\n  hide,\n  type,\n  clearfields,\n  props,\n  inputBalance,\n  onInputchange,\n  setinputBalance,\n  withdraw,\n  isWithdrawButtonEnabled,\n  isWithdrawing,\n}) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <Modal\n            isOpen={isShowing}\n            onRequestClose={hide}\n            contentLabel=\"Example Modal\"\n            style={customStyles}\n            ariaHideApp={false}\n          >\n            <div className=\"flex flex-col h-full justify-between\">\n              <div>\n                <div className=\"flex flex-row justify-between items-center\">\n                  <div className=\"\">\n                    <span className=\"deposit-modal-heading\">Withdraw</span>\n                  </div>\n                  <div className=\"btn-close white\">\n                    <button\n                      type=\"Button\"\n                      className=\"btn-close white\"\n                      aria-label=\"Close\"\n                      onClick={clearfields}\n                    ></button>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-row  justify-between items-center mt-4\">\n                <div className=\"\">\n                  <span className=\"deposit-modal-available text-m\">\n                    Available\n                  </span>\n                </div>\n                <div className=\"flex flex-row \">\n                  <div className=\"d-flex align-items-center m-1\">\n                    <img\n                      src={logo}\n                      alt=\"LOGO Image\"\n                      className=\"img-fluid mini-logo-size\"\n                    />\n                  </div>\n                  <div className=\"ps-1 pool_past_prizes m-1\">\n                    {props.withdrawable / 1e6} SCRT\n                  </div>\n                </div>\n              </div>\n\n              <div\n                className=\"flex flex-row  justify-between items-center  p-2\n              mt-2 deposit-modal-deposit-field deposit-modal-deposit-field-shape \"\n              >\n                <div>\n                  <input\n                    className=\"deposit-modal-deposit-field text-white w-full\"\n                    type=\"number\"\n                    min=\"0\"\n                    placeholder=\"0.00\"\n                    placeholder-default=\"white\"\n                    name=\"inputBalance\"\n                    value={inputBalance}\n                    onChange={onInputchange}\n                  />\n                </div>\n                <div className=\"deposit-modal-deposit-field-tokens\">SCRT</div>\n              </div>\n              <div className=\"flex flex-row mt-4 items-center justify-between text-white \">\n                <div\n                  className=\"deposit-modal-amount-percentage px-5 \"\n                  onClick={() => {\n                    setinputBalance(\n                      ((props.withdrawable / 1e6) * 0.25).toFixed(2)\n                    );\n                  }}\n                >\n                  <button>25%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage  px-5\"\n                  onClick={() => {\n                    setinputBalance(\n                      ((props.withdrawable / 1e6) * 0.5).toFixed(2)\n                    );\n                  }}\n                >\n                  <button>50%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage px-5 \"\n                  onClick={() => {\n                    setinputBalance(\n                      ((props.withdrawable / 1e6) * 0.75).toFixed(2)\n                    );\n                  }}\n                >\n                  <button>75%</button>\n                </div>\n                <div\n                  className=\"deposit-modal-amount-percentage  px-5\"\n                  onClick={() => {\n                    setinputBalance(props.withdrawable / 1e6);\n                  }}\n                >\n                  <button>100%</button>\n                </div>\n              </div>\n              <div className=\"btn    \">\n                <Button\n                  className=\"btn account_deposit_button text-white self-center\"\n                  onClick={() => withdraw(type)}\n                  disabled={!isWithdrawButtonEnabled}\n                >\n                  {isWithdrawing ? (\n                    <div className=\"loader-1 center\"></div>\n                  ) : (\n                    <div>Withdraw</div>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </Modal>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nfunction WithdrawModal(props) {\n  //fetch the balance\n  //create a state where you fetch secretjs once + the address\n  //\n\n  let [inputBalance, setinputBalance] = useState(0);\n  let [isWithdrawButtonEnabled, SetIsButtonEnabled] = useState(false);\n  let [isWithdrawing, setIsWithdrawing] = useState(false);\n\n  let [wallet, setWallet] = useState({ secretjs: null, address: null });\n\n  async function setupKeplrfun() {\n    const { secretjs, address } = await setupKeplr();\n    setWallet({ secretjs, address });\n  }\n\n  async function withdraw(type) {\n    setIsWithdrawing(true);\n    // To create a readonly secret.js client, just pass in a gRPC-web endpoint\n    const { secretjs, address } = wallet;\n\n    let amount = String(parseInt(inputBalance * 1e6));\n    let contractAddress = process.env.REACT_APP_POOL_CONTRACT_ADDRESS;\n    let codeHash = process.env.REACT_APP_POOL_CONTRACT_HASH;\n    let message_type;\n    try {\n      if (type === \"user\") {\n        message_type = {\n          withdraw: {\n            amount: amount,\n            wrapping_enabled: false,\n          },\n        };\n      }\n      if (type === \"sponsor\") {\n        message_type = {\n          sponsor_withdraw: {\n            amount: amount,\n            wrapping_enabled: false,\n          },\n        };\n      }\n\n      const tx = await secretjs.tx.compute.executeContract(\n        {\n          sender: address,\n          contractAddress: contractAddress,\n          codeHash: codeHash, // optional but way faster\n          msg: message_type,\n        },\n        {\n          gasLimit: 240297,\n        }\n      );\n      console.log(tx);\n\n      Notifications(\n        \"success\",\n        \"Transaction sent!\",\n        `Successfully withdrawn: ${inputBalance} SCRT \\n \n        Txhash: ${tx.transactionHash}`\n      );\n    } catch (e) {\n      Notifications(\"error\", \"ERROR\", e);\n    }\n\n    await clearfields();\n  }\n\n  useEffect(() => {\n    if (wallet.secretjs == null || wallet.address == null) {\n      setupKeplrfun();\n    }\n    if (inputBalance != 0) {\n      SetIsButtonEnabled(true);\n    } else {\n      SetIsButtonEnabled(false);\n    }\n\n    if (inputBalance > props.withdrawable) {\n      SetIsButtonEnabled(false);\n    }\n  }, [wallet, inputBalance, props.withdrawable]);\n\n  async function onInputchange(e) {\n    setinputBalance(e.target.value);\n  }\n\n  async function clearfields() {\n    props.hide();\n    await props.callback();\n    setinputBalance(0);\n    setIsWithdrawing(false);\n  }\n\n  return (\n    <WM\n      isShowing={props.isShowing}\n      hide={props.hide}\n      type={props.type}\n      clearfields={clearfields}\n      props={props}\n      onInputchange={onInputchange}\n      setinputBalance={setinputBalance}\n      inputBalance={inputBalance}\n      withdraw={withdraw}\n      isWithdrawButtonEnabled={isWithdrawButtonEnabled}\n      isWithdrawing={isWithdrawing}\n    />\n  );\n}\n\nexport default WithdrawModal;\n"],"sourceRoot":""}