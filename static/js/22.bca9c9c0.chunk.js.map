{"version":3,"sources":["modals/WithdrawableModal.js"],"names":["i","customStyles","content","top","left","right","bottom","marginRight","width","height","transform","backgroundColor","borderRadius","padding","UnbondingModal","props","useState","inputBalance","setinputBalance","isUnbondButtonEnabled","SetIsButtonEnabled","isUnbonding","setIsUnbonding","secretjs","address","wallet","setWallet","setupKeplr","amount","String","parseInt","process","tx","compute","executeContract","sender","contractAddress","codeHash","msg","withdraw","wrapping_enabled","gasLimit","Notifications","transactionHash","clearfields","onInputchange","e","target","value","callback","hide","useEffect","setupKeplrfun","withdrawable","UM","isShowing","ReactDOM","createPortal","Fragment","isOpen","onRequestClose","contentLabel","style","ariaHideApp","className","type","aria-label","onClick","src","logo","alt","min","placeholder","placeholder-default","name","onChange","toFixed","disabled","document","body"],"mappings":"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","file":"static/js/22.bca9c9c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport { Button } from \"@windmill/react-ui\";\nimport logo from \"../assets/img/scrt_logo.png\"; // with import\nimport { setupKeplr } from \"../components/CryptoComponents/client\";\nimport ReactDOM from \"react-dom\";\nimport Notifications from \"../utils/demo/notifications.js\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    width: \"35%\",\n    height: \"35%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0f4d4a\",\n    borderRadius: \"1%\",\n    padding: \"2%\",\n  },\n};\n\nfunction UnbondingModal(props) {\n  //fetch the balance\n  //create a state where you fetch secretjs once + the address\n  //\n\n  let [inputBalance, setinputBalance] = useState(0);\n  let [isUnbondButtonEnabled, SetIsButtonEnabled] = useState(false);\n  let [isUnbonding, setIsUnbonding] = useState(false);\n\n  let [wallet, setWallet] = useState({ secretjs: null, address: null });\n\n  async function setupKeplrfun() {\n    const { secretjs, address } = await setupKeplr();\n    setWallet({ secretjs, address });\n  }\n\n  async function withdraw() {\n    setIsUnbonding(true);\n    // To create a readonly secret.js client, just pass in a gRPC-web endpoint\n    const { secretjs, address } = wallet;\n\n    let amount = String(parseInt(inputBalance * 1e6));\n    let contractAddress = process.env.REACT_APP_POOL_CONTRACT_ADDRESS;\n    let codeHash = process.env.REACT_APP_POOL_CONTRACT_HASH;\n\n    try {\n      const tx = await secretjs.tx.compute.executeContract(\n        {\n          sender: address,\n          contractAddress: contractAddress,\n          codeHash: codeHash, // optional but way faster\n          msg: {\n            withdraw: {\n              amount: amount,\n              wrapping_enabled: false,\n            },\n          },\n        },\n        {\n          gasLimit: 240297,\n        }\n      );\n\n      Notifications(\n        \"success\",\n        \"Transaction sent!\",\n        `Successfully Unbonded: ${inputBalance} SCRT \\n \n        Txhash: ${tx.transactionHash}`\n      );\n    } catch (e) {\n      Notifications(\"error\", \"ERROR\", e);\n    }\n\n    await clearfields();\n  }\n\n  useEffect(() => {\n    if (wallet.secretjs == null || wallet.address == null) {\n      setupKeplrfun();\n    }\n    if (inputBalance != 0) {\n      SetIsButtonEnabled(true);\n    } else {\n      SetIsButtonEnabled(false);\n    }\n\n    if (inputBalance > props.withdrawable) {\n      SetIsButtonEnabled(false);\n    }\n  }, [wallet, inputBalance, props.withdrawable]);\n\n  async function onInputchange(e) {\n    setinputBalance(e.target.value);\n  }\n\n  async function clearfields() {\n    await props.callback();\n    props.hide();\n    setinputBalance(0);\n    setIsUnbonding(false);\n  }\n\n  const UM = ({ isShowing, hide }) =>\n    isShowing\n      ? ReactDOM.createPortal(\n          <React.Fragment>\n            <Modal\n              isOpen={isShowing}\n              onRequestClose={hide}\n              contentLabel=\"Example Modal\"\n              style={customStyles}\n              ariaHideApp={false}\n            >\n              <div className=\"flex flex-col h-full justify-between\">\n                <div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <div className=\"\">\n                      <span className=\"deposit-modal-heading\">Withdraw</span>\n                    </div>\n                    <div className=\"btn-close white\">\n                      <button\n                        type=\"Button\"\n                        className=\"btn-close white\"\n                        aria-label=\"Close\"\n                        onClick={clearfields}\n                      ></button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-row  justify-between items-center mt-4\">\n                  <div className=\"\">\n                    <span className=\"deposit-modal-available text-m\">\n                      Available\n                    </span>\n                  </div>\n                  <div className=\"flex flex-row \">\n                    <div className=\"d-flex align-items-center m-1\">\n                      <img\n                        src={logo}\n                        alt=\"LOGO Image\"\n                        className=\"img-fluid mini-logo-size\"\n                      />\n                    </div>\n                    <div className=\"ps-1 pool_past_prizes m-1\">\n                      {props.withdrawable / 1e6} SCRT\n                    </div>\n                  </div>\n                </div>\n\n                <div\n                  className=\"flex flex-row  justify-between items-center  p-2\n              mt-2 deposit-modal-deposit-field deposit-modal-deposit-field-shape \"\n                >\n                  <div>\n                    <input\n                      className=\"deposit-modal-deposit-field text-white w-full\"\n                      type=\"number\"\n                      min=\"0\"\n                      placeholder=\"0.00\"\n                      placeholder-default=\"white\"\n                      name=\"inputBalance\"\n                      value={inputBalance}\n                      onChange={onInputchange}\n                    />\n                  </div>\n                  <div className=\"deposit-modal-deposit-field-tokens\">SCRT</div>\n                </div>\n                <div className=\"flex flex-row mt-4 items-center justify-between text-white \">\n                  <div\n                    className=\"deposit-modal-amount-percentage px-5 \"\n                    onClick={() => {\n                      setinputBalance(\n                        ((props.withdrawable / 1e6) * 0.25).toFixed(2)\n                      );\n                    }}\n                  >\n                    <button>25%</button>\n                  </div>\n                  <div\n                    className=\"deposit-modal-amount-percentage  px-5\"\n                    onClick={() => {\n                      setinputBalance(\n                        ((props.withdrawable / 1e6) * 0.5).toFixed(2)\n                      );\n                    }}\n                  >\n                    <button>50%</button>\n                  </div>\n                  <div\n                    className=\"deposit-modal-amount-percentage px-5 \"\n                    onClick={() => {\n                      setinputBalance(\n                        ((props.withdrawable / 1e6) * 0.75).toFixed(2)\n                      );\n                    }}\n                  >\n                    <button>75%</button>\n                  </div>\n                  <div\n                    className=\"deposit-modal-amount-percentage  px-5\"\n                    onClick={() => {\n                      setinputBalance(props.withdrawable / 1e6);\n                    }}\n                  >\n                    <button>100%</button>\n                  </div>\n                </div>\n                <div className=\"btn    \">\n                  <Button\n                    className=\"btn account_deposit_button text-white self-center\"\n                    onClick={() => withdraw()}\n                    disabled={!isUnbondButtonEnabled}\n                  >\n                    {isUnbonding ? (\n                      <div className=\"loader-1 center\">\n                        <span>.</span>\n                      </div>\n                    ) : (\n                      <div>Withdraw</div>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </Modal>\n          </React.Fragment>,\n          document.body\n        )\n      : null;\n  return <UM isShowing={props.isShowing} hide={props.hide} />;\n}\n\nexport default UnbondingModal;\n"],"sourceRoot":""}